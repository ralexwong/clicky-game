{"version":3,"sources":["../../../clicky-game/src/navbar.js","../../../clicky-game/src/header.js","../../../clicky-game/src/footer.js","../../../clicky-game/src/chracterDiv.js","../../../clicky-game/src/main.js","../../../clicky-game/src/App.js","../../../clicky-game/src/serviceWorker.js","../../../clicky-game/src/index.js"],"names":["Navbar","props","react_default","a","createElement","className","id","score","highScore","Header","Footer","src","CharacterDiv","value","onClick","image","alt","Main","state","clickedImages","images","shuffleArray","array","i","length","j","Math","floor","random","_ref","shuffleResult","shuffledImages","_this","setState","checkImage","indexOf","concat","highscore","_this2","this","navbar","header","map","characters","chracterDiv","key","footer","Component","App","main","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.46414d37.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Navbar (props) {\r\n    return (\r\n        <nav className=\"navbar\">\r\n            <ul>\r\n                <li>Clicky Game</li>\r\n                <li>Click an image to begin!</li>\r\n                <li>Score: <span id=\"score\">{props.score}</span> | Top Score: <span id=\"topScore\">{props.highScore}</span></li>\r\n            </ul>\r\n        </nav> \r\n    )\r\n};\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\nconst Header = () => (\r\n    <div>\r\n        <h1>Clicky Game!</h1>\r\n        <h2>Click on image to earn points, but don't click on any more than once!</h2>\r\n    </div>\r\n)\r\n\r\nexport default Header;","import React from 'react'\r\n\r\nconst Footer = () => (\r\n    <div>\r\n        <footer>Clicky Game! <span><img src=\"../public/images/footer.jpg\"></img></span></footer>\r\n    </div>\r\n)\r\n\r\nexport default Footer;","import React from 'react';\r\n\r\nfunction CharacterDiv (props) {\r\n    return (\r\n        <div \r\n            className=\"col-sm-4\"\r\n            value={props.id}\r\n            onClick={ () => {props.onClick(props.id)}}\r\n            >\r\n\r\n            <img \r\n                className=\"card\"\r\n                src={props.image}\r\n                id={props.id}\r\n                alt={props.id}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default CharacterDiv;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Navbar from './navbar.js';\r\nimport Header from './header.js';\r\nimport Footer from './footer.js';\r\nimport images from './images.json';\r\nimport CharacterDiv from './chracterDiv';\r\n\r\nclass Main extends Component {\r\n\r\n    state = {\r\n        clickedImages: [],\r\n        score: 0,\r\n        highScore: 0,\r\n        images,\r\n\r\n    };\r\n\r\n    // shuffle the array so the image order is different everytime\r\n    shuffleArray = array => {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n        return array;\r\n    };\r\n\r\n    shuffleResult = () => {\r\n        let shuffledImages = this.shuffleArray(images);\r\n        this.setState({ images: shuffledImages })\r\n    }\r\n\r\n    // takes input of the clicked image ID and compare it to the array of already clicked images\r\n    checkImage = id => {\r\n\r\n        // if it has been clicked then the states reset and the game images reshuffle\r\n            if (this.state.clickedImages.indexOf(id) === -1) {\r\n                this.setState({ score: this.state.score + 1})\r\n                this.setState({ clickedImages: this.state.clickedImages.concat(id) });\r\n                if (this.state.score > this.state.highScore) {\r\n                    this.setState({ highscore: this.state.highscore + 1});\r\n                }\r\n                this.shuffleResult();\r\n            } else {\r\n                this.setState({ score: 0 });\r\n                this.setState({ clickedImages: [] });\r\n                this.shuffleResult()\r\n            }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar\r\n                    score={this.state.score}\r\n                    highScore={this.state.highScore}\r\n                />\r\n                <Header />\r\n                <div id=\"mainContainer\" className=\"container\">\r\n                    <div className=\"row\">\r\n                        {this.state.images.map(characters => (\r\n                            <CharacterDiv \r\n                                key={characters.id}\r\n                                image={characters.image}\r\n                                id={characters.id}\r\n                                onClick={this.checkImage}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n                <Footer />\r\n            </div>\r\n        );\r\n\r\n    }\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport './App.css';\nimport Main from './main.js';\n\n\nconst App = () => <Main />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}